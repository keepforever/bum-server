type Query {
  me: User
}

type Mutation {
  sendMessage(recipient: ID!, type: String!, text: String!): Boolean!
  refreshToken: RefreshTokenPayload!
  login(email: String!, password: String!): UserLoginResponse!
  userSignup(
    name: String!
    email: String!
    isSeller: Boolean!
    password: String!
  ): UserAuthPayload!
  userSettings(
    darkMode: Boolean!
    autoAccept: Boolean!
  ):Boolean!
}

# hack so DateTime dosen't throw error
scalar DateTime

# redefinition minus directives
type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  password: String!
  isAdmin: Boolean @default(value: "false")
  userInfo: UserInfo
  decks: [Deck!]!
  votes: [Vote!]!
  userSettings: UserSettings
  connections: [Connection!]!
  inbox: [Message!]! @relation(name: "RecievedMessages" , onDelete: SET_NULL)
  outbox: [Message!]! @relation(name: "WrittenMessages" , onDelete: SET_NULL)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Deck {
  id: ID! @unique
  author: User!
  deckList: String!
  score: Int! @default(value: "0" )
}

type Vote {
  id: ID! @unique
  deck: Deck!
  quality: Boolean!
}

type UserInfo {
  id: ID! @unique
  user: User!
  about: String!
  timeZone: String!
}

type UserSettings {
  id: ID! @unique
  user: User!
  darkMode: Boolean @default(value: "false")
  autoAccept: Boolean @default(value: "false")
}

## Messages ##
type Message {
  id: ID! @unique
  author: User! @relation(name: "WrittenMessages", onDelete: SET_NULL)
  recipient: User! @relation(name: "RecievedMessages" , onDelete: SET_NULL)
  type: String! @default(value: "default-message-type")
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# User to User
type Connection {
  id: ID! @unique
  allowance: Int! @default(value: "42" )
  friend: User!
  about: String! @default(value: "default-friends-because")
  verified: Boolean @default(value: "false")
  accepted: Boolean @default(value: "false")
  createdAt: DateTime!
  updatedAt: DateTime!
}

#############################################
#### Original schema.graphql below here #####
#############################################

## utility types ##

type UserLoginResponse {
  payload: UserAuthPayload
  error: Error
}

type RefreshTokenPayload {
  token: String!
  userId: String!
}

type UserAuthPayload {
  token: String!
  user: User!
}

type Error {
  field: String!
  msg: String!
}
