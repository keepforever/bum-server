// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  connection: (where?: ConnectionWhereInput) => Promise<boolean>;
  deck: (where?: DeckWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userInfo: (where?: UserInfoWhereInput) => Promise<boolean>;
  userSettings: (where?: UserSettingsWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  connection: (where: ConnectionWhereUniqueInput) => ConnectionPromise;
  connections: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Connection>;
  connectionsConnection: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConnectionConnectionPromise;
  deck: (where: DeckWhereUniqueInput) => DeckPromise;
  decks: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deck>;
  decksConnection: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeckConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userInfo: (where: UserInfoWhereUniqueInput) => UserInfoPromise;
  userInfoes: (args?: {
    where?: UserInfoWhereInput;
    orderBy?: UserInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserInfo>;
  userInfoesConnection: (args?: {
    where?: UserInfoWhereInput;
    orderBy?: UserInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserInfoConnectionPromise;
  userSettings: (where: UserSettingsWhereUniqueInput) => UserSettingsPromise;
  userSettingses: (args?: {
    where?: UserSettingsWhereInput;
    orderBy?: UserSettingsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserSettings>;
  userSettingsesConnection: (args?: {
    where?: UserSettingsWhereInput;
    orderBy?: UserSettingsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserSettingsConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConnection: (data: ConnectionCreateInput) => ConnectionPromise;
  updateConnection: (args: {
    data: ConnectionUpdateInput;
    where: ConnectionWhereUniqueInput;
  }) => ConnectionPromise;
  updateManyConnections: (args: {
    data: ConnectionUpdateManyMutationInput;
    where?: ConnectionWhereInput;
  }) => BatchPayloadPromise;
  upsertConnection: (args: {
    where: ConnectionWhereUniqueInput;
    create: ConnectionCreateInput;
    update: ConnectionUpdateInput;
  }) => ConnectionPromise;
  deleteConnection: (where: ConnectionWhereUniqueInput) => ConnectionPromise;
  deleteManyConnections: (where?: ConnectionWhereInput) => BatchPayloadPromise;
  createDeck: (data: DeckCreateInput) => DeckPromise;
  updateDeck: (args: {
    data: DeckUpdateInput;
    where: DeckWhereUniqueInput;
  }) => DeckPromise;
  updateManyDecks: (args: {
    data: DeckUpdateManyMutationInput;
    where?: DeckWhereInput;
  }) => BatchPayloadPromise;
  upsertDeck: (args: {
    where: DeckWhereUniqueInput;
    create: DeckCreateInput;
    update: DeckUpdateInput;
  }) => DeckPromise;
  deleteDeck: (where: DeckWhereUniqueInput) => DeckPromise;
  deleteManyDecks: (where?: DeckWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserInfo: (data: UserInfoCreateInput) => UserInfoPromise;
  updateUserInfo: (args: {
    data: UserInfoUpdateInput;
    where: UserInfoWhereUniqueInput;
  }) => UserInfoPromise;
  updateManyUserInfoes: (args: {
    data: UserInfoUpdateManyMutationInput;
    where?: UserInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertUserInfo: (args: {
    where: UserInfoWhereUniqueInput;
    create: UserInfoCreateInput;
    update: UserInfoUpdateInput;
  }) => UserInfoPromise;
  deleteUserInfo: (where: UserInfoWhereUniqueInput) => UserInfoPromise;
  deleteManyUserInfoes: (where?: UserInfoWhereInput) => BatchPayloadPromise;
  createUserSettings: (data: UserSettingsCreateInput) => UserSettingsPromise;
  updateUserSettings: (args: {
    data: UserSettingsUpdateInput;
    where: UserSettingsWhereUniqueInput;
  }) => UserSettingsPromise;
  updateManyUserSettingses: (args: {
    data: UserSettingsUpdateManyMutationInput;
    where?: UserSettingsWhereInput;
  }) => BatchPayloadPromise;
  upsertUserSettings: (args: {
    where: UserSettingsWhereUniqueInput;
    create: UserSettingsCreateInput;
    update: UserSettingsUpdateInput;
  }) => UserSettingsPromise;
  deleteUserSettings: (
    where: UserSettingsWhereUniqueInput
  ) => UserSettingsPromise;
  deleteManyUserSettingses: (
    where?: UserSettingsWhereInput
  ) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  updateManyVotes: (args: {
    data: VoteUpdateManyMutationInput;
    where?: VoteWhereInput;
  }) => BatchPayloadPromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  connection: (
    where?: ConnectionSubscriptionWhereInput
  ) => ConnectionSubscriptionPayloadSubscription;
  deck: (
    where?: DeckSubscriptionWhereInput
  ) => DeckSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userInfo: (
    where?: UserInfoSubscriptionWhereInput
  ) => UserInfoSubscriptionPayloadSubscription;
  userSettings: (
    where?: UserSettingsSubscriptionWhereInput
  ) => UserSettingsSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DeckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deckList_ASC"
  | "deckList_DESC"
  | "deckDetails_ASC"
  | "deckDetails_DESC"
  | "deckName_ASC"
  | "deckName_DESC"
  | "score_ASC"
  | "score_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quality_ASC"
  | "quality_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConnectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "allowance_ASC"
  | "allowance_DESC"
  | "about_ASC"
  | "about_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "accepted_ASC"
  | "accepted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "about_ASC"
  | "about_DESC"
  | "timeZone_ASC"
  | "timeZone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserSettingsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "darkMode_ASC"
  | "darkMode_DESC"
  | "autoAccept_ASC"
  | "autoAccept_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConnectionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DeckWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  deckList?: String;
  deckList_not?: String;
  deckList_in?: String[] | String;
  deckList_not_in?: String[] | String;
  deckList_lt?: String;
  deckList_lte?: String;
  deckList_gt?: String;
  deckList_gte?: String;
  deckList_contains?: String;
  deckList_not_contains?: String;
  deckList_starts_with?: String;
  deckList_not_starts_with?: String;
  deckList_ends_with?: String;
  deckList_not_ends_with?: String;
  deckDetails?: String;
  deckDetails_not?: String;
  deckDetails_in?: String[] | String;
  deckDetails_not_in?: String[] | String;
  deckDetails_lt?: String;
  deckDetails_lte?: String;
  deckDetails_gt?: String;
  deckDetails_gte?: String;
  deckDetails_contains?: String;
  deckDetails_not_contains?: String;
  deckDetails_starts_with?: String;
  deckDetails_not_starts_with?: String;
  deckDetails_ends_with?: String;
  deckDetails_not_ends_with?: String;
  deckName?: String;
  deckName_not?: String;
  deckName_in?: String[] | String;
  deckName_not_in?: String[] | String;
  deckName_lt?: String;
  deckName_lte?: String;
  deckName_gt?: String;
  deckName_gte?: String;
  deckName_contains?: String;
  deckName_not_contains?: String;
  deckName_starts_with?: String;
  deckName_not_starts_with?: String;
  deckName_ends_with?: String;
  deckName_not_ends_with?: String;
  score?: Int;
  score_not?: Int;
  score_in?: Int[] | Int;
  score_not_in?: Int[] | Int;
  score_lt?: Int;
  score_lte?: Int;
  score_gt?: Int;
  score_gte?: Int;
  AND?: DeckWhereInput[] | DeckWhereInput;
  OR?: DeckWhereInput[] | DeckWhereInput;
  NOT?: DeckWhereInput[] | DeckWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  isAdmin?: Boolean;
  isAdmin_not?: Boolean;
  userInfo?: UserInfoWhereInput;
  decks_every?: DeckWhereInput;
  decks_some?: DeckWhereInput;
  decks_none?: DeckWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  userSettings?: UserSettingsWhereInput;
  connections_every?: ConnectionWhereInput;
  connections_some?: ConnectionWhereInput;
  connections_none?: ConnectionWhereInput;
  inbox_every?: MessageWhereInput;
  inbox_some?: MessageWhereInput;
  inbox_none?: MessageWhereInput;
  outbox_every?: MessageWhereInput;
  outbox_some?: MessageWhereInput;
  outbox_none?: MessageWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserInfoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  timeZone?: String;
  timeZone_not?: String;
  timeZone_in?: String[] | String;
  timeZone_not_in?: String[] | String;
  timeZone_lt?: String;
  timeZone_lte?: String;
  timeZone_gt?: String;
  timeZone_gte?: String;
  timeZone_contains?: String;
  timeZone_not_contains?: String;
  timeZone_starts_with?: String;
  timeZone_not_starts_with?: String;
  timeZone_ends_with?: String;
  timeZone_not_ends_with?: String;
  AND?: UserInfoWhereInput[] | UserInfoWhereInput;
  OR?: UserInfoWhereInput[] | UserInfoWhereInput;
  NOT?: UserInfoWhereInput[] | UserInfoWhereInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  deck?: DeckWhereInput;
  quality?: Boolean;
  quality_not?: Boolean;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface UserSettingsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  darkMode?: Boolean;
  darkMode_not?: Boolean;
  autoAccept?: Boolean;
  autoAccept_not?: Boolean;
  AND?: UserSettingsWhereInput[] | UserSettingsWhereInput;
  OR?: UserSettingsWhereInput[] | UserSettingsWhereInput;
  NOT?: UserSettingsWhereInput[] | UserSettingsWhereInput;
}

export interface ConnectionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  allowance?: Int;
  allowance_not?: Int;
  allowance_in?: Int[] | Int;
  allowance_not_in?: Int[] | Int;
  allowance_lt?: Int;
  allowance_lte?: Int;
  allowance_gt?: Int;
  allowance_gte?: Int;
  friend?: UserWhereInput;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  accepted?: Boolean;
  accepted_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ConnectionWhereInput[] | ConnectionWhereInput;
  OR?: ConnectionWhereInput[] | ConnectionWhereInput;
  NOT?: ConnectionWhereInput[] | ConnectionWhereInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  recipient?: UserWhereInput;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export type DeckWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type UserInfoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserSettingsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ConnectionCreateInput {
  allowance?: Int;
  friend: UserCreateOneWithoutConnectionsInput;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface UserCreateOneWithoutConnectionsInput {
  create?: UserCreateWithoutConnectionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutConnectionsInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface UserInfoCreateOneWithoutUserInput {
  create?: UserInfoCreateWithoutUserInput;
  connect?: UserInfoWhereUniqueInput;
}

export interface UserInfoCreateWithoutUserInput {
  about: String;
  timeZone: String;
}

export interface DeckCreateManyWithoutAuthorInput {
  create?: DeckCreateWithoutAuthorInput[] | DeckCreateWithoutAuthorInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
}

export interface DeckCreateWithoutAuthorInput {
  deckList: String;
  deckDetails: String;
  deckName?: String;
  score?: Int;
}

export interface VoteCreateManyInput {
  create?: VoteCreateInput[] | VoteCreateInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface VoteCreateInput {
  deck: DeckCreateOneInput;
  quality: Boolean;
}

export interface DeckCreateOneInput {
  create?: DeckCreateInput;
  connect?: DeckWhereUniqueInput;
}

export interface DeckCreateInput {
  author: UserCreateOneWithoutDecksInput;
  deckList: String;
  deckDetails: String;
  deckName?: String;
  score?: Int;
}

export interface UserCreateOneWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutDecksInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface UserSettingsCreateOneWithoutUserInput {
  create?: UserSettingsCreateWithoutUserInput;
  connect?: UserSettingsWhereUniqueInput;
}

export interface UserSettingsCreateWithoutUserInput {
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface ConnectionCreateManyWithoutFriendInput {
  create?:
    | ConnectionCreateWithoutFriendInput[]
    | ConnectionCreateWithoutFriendInput;
  connect?: ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput;
}

export interface ConnectionCreateWithoutFriendInput {
  allowance?: Int;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface MessageCreateManyWithoutRecipientInput {
  create?:
    | MessageCreateWithoutRecipientInput[]
    | MessageCreateWithoutRecipientInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageCreateWithoutRecipientInput {
  author: UserCreateOneWithoutOutboxInput;
  type?: String;
  text: String;
}

export interface UserCreateOneWithoutOutboxInput {
  create?: UserCreateWithoutOutboxInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutOutboxInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
}

export interface MessageCreateManyWithoutAuthorInput {
  create?: MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageCreateWithoutAuthorInput {
  recipient: UserCreateOneWithoutInboxInput;
  type?: String;
  text: String;
}

export interface UserCreateOneWithoutInboxInput {
  create?: UserCreateWithoutInboxInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutInboxInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface ConnectionUpdateInput {
  allowance?: Int;
  friend?: UserUpdateOneRequiredWithoutConnectionsInput;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface UserUpdateOneRequiredWithoutConnectionsInput {
  create?: UserCreateWithoutConnectionsInput;
  update?: UserUpdateWithoutConnectionsDataInput;
  upsert?: UserUpsertWithoutConnectionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutConnectionsDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserInfoUpdateOneWithoutUserInput {
  create?: UserInfoCreateWithoutUserInput;
  update?: UserInfoUpdateWithoutUserDataInput;
  upsert?: UserInfoUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserInfoWhereUniqueInput;
}

export interface UserInfoUpdateWithoutUserDataInput {
  about?: String;
  timeZone?: String;
}

export interface UserInfoUpsertWithoutUserInput {
  update: UserInfoUpdateWithoutUserDataInput;
  create: UserInfoCreateWithoutUserInput;
}

export interface DeckUpdateManyWithoutAuthorInput {
  create?: DeckCreateWithoutAuthorInput[] | DeckCreateWithoutAuthorInput;
  delete?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  set?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  disconnect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  update?:
    | DeckUpdateWithWhereUniqueWithoutAuthorInput[]
    | DeckUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | DeckUpsertWithWhereUniqueWithoutAuthorInput[]
    | DeckUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  updateMany?:
    | DeckUpdateManyWithWhereNestedInput[]
    | DeckUpdateManyWithWhereNestedInput;
}

export interface DeckUpdateWithWhereUniqueWithoutAuthorInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutAuthorDataInput;
}

export interface DeckUpdateWithoutAuthorDataInput {
  deckList?: String;
  deckDetails?: String;
  deckName?: String;
  score?: Int;
}

export interface DeckUpsertWithWhereUniqueWithoutAuthorInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutAuthorDataInput;
  create: DeckCreateWithoutAuthorInput;
}

export interface DeckScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  deckList?: String;
  deckList_not?: String;
  deckList_in?: String[] | String;
  deckList_not_in?: String[] | String;
  deckList_lt?: String;
  deckList_lte?: String;
  deckList_gt?: String;
  deckList_gte?: String;
  deckList_contains?: String;
  deckList_not_contains?: String;
  deckList_starts_with?: String;
  deckList_not_starts_with?: String;
  deckList_ends_with?: String;
  deckList_not_ends_with?: String;
  deckDetails?: String;
  deckDetails_not?: String;
  deckDetails_in?: String[] | String;
  deckDetails_not_in?: String[] | String;
  deckDetails_lt?: String;
  deckDetails_lte?: String;
  deckDetails_gt?: String;
  deckDetails_gte?: String;
  deckDetails_contains?: String;
  deckDetails_not_contains?: String;
  deckDetails_starts_with?: String;
  deckDetails_not_starts_with?: String;
  deckDetails_ends_with?: String;
  deckDetails_not_ends_with?: String;
  deckName?: String;
  deckName_not?: String;
  deckName_in?: String[] | String;
  deckName_not_in?: String[] | String;
  deckName_lt?: String;
  deckName_lte?: String;
  deckName_gt?: String;
  deckName_gte?: String;
  deckName_contains?: String;
  deckName_not_contains?: String;
  deckName_starts_with?: String;
  deckName_not_starts_with?: String;
  deckName_ends_with?: String;
  deckName_not_ends_with?: String;
  score?: Int;
  score_not?: Int;
  score_in?: Int[] | Int;
  score_not_in?: Int[] | Int;
  score_lt?: Int;
  score_lte?: Int;
  score_gt?: Int;
  score_gte?: Int;
  AND?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  OR?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  NOT?: DeckScalarWhereInput[] | DeckScalarWhereInput;
}

export interface DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput;
  data: DeckUpdateManyDataInput;
}

export interface DeckUpdateManyDataInput {
  deckList?: String;
  deckDetails?: String;
  deckName?: String;
  score?: Int;
}

export interface VoteUpdateManyInput {
  create?: VoteCreateInput[] | VoteCreateInput;
  update?:
    | VoteUpdateWithWhereUniqueNestedInput[]
    | VoteUpdateWithWhereUniqueNestedInput;
  upsert?:
    | VoteUpsertWithWhereUniqueNestedInput[]
    | VoteUpsertWithWhereUniqueNestedInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  updateMany?:
    | VoteUpdateManyWithWhereNestedInput[]
    | VoteUpdateManyWithWhereNestedInput;
}

export interface VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateDataInput;
}

export interface VoteUpdateDataInput {
  deck?: DeckUpdateOneRequiredInput;
  quality?: Boolean;
}

export interface DeckUpdateOneRequiredInput {
  create?: DeckCreateInput;
  update?: DeckUpdateDataInput;
  upsert?: DeckUpsertNestedInput;
  connect?: DeckWhereUniqueInput;
}

export interface DeckUpdateDataInput {
  author?: UserUpdateOneRequiredWithoutDecksInput;
  deckList?: String;
  deckDetails?: String;
  deckName?: String;
  score?: Int;
}

export interface UserUpdateOneRequiredWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  update?: UserUpdateWithoutDecksDataInput;
  upsert?: UserUpsertWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutDecksDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserSettingsUpdateOneWithoutUserInput {
  create?: UserSettingsCreateWithoutUserInput;
  update?: UserSettingsUpdateWithoutUserDataInput;
  upsert?: UserSettingsUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserSettingsWhereUniqueInput;
}

export interface UserSettingsUpdateWithoutUserDataInput {
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface UserSettingsUpsertWithoutUserInput {
  update: UserSettingsUpdateWithoutUserDataInput;
  create: UserSettingsCreateWithoutUserInput;
}

export interface ConnectionUpdateManyWithoutFriendInput {
  create?:
    | ConnectionCreateWithoutFriendInput[]
    | ConnectionCreateWithoutFriendInput;
  delete?: ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput;
  connect?: ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput;
  set?: ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput;
  disconnect?: ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput;
  update?:
    | ConnectionUpdateWithWhereUniqueWithoutFriendInput[]
    | ConnectionUpdateWithWhereUniqueWithoutFriendInput;
  upsert?:
    | ConnectionUpsertWithWhereUniqueWithoutFriendInput[]
    | ConnectionUpsertWithWhereUniqueWithoutFriendInput;
  deleteMany?: ConnectionScalarWhereInput[] | ConnectionScalarWhereInput;
  updateMany?:
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput;
}

export interface ConnectionUpdateWithWhereUniqueWithoutFriendInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutFriendDataInput;
}

export interface ConnectionUpdateWithoutFriendDataInput {
  allowance?: Int;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface ConnectionUpsertWithWhereUniqueWithoutFriendInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutFriendDataInput;
  create: ConnectionCreateWithoutFriendInput;
}

export interface ConnectionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  allowance?: Int;
  allowance_not?: Int;
  allowance_in?: Int[] | Int;
  allowance_not_in?: Int[] | Int;
  allowance_lt?: Int;
  allowance_lte?: Int;
  allowance_gt?: Int;
  allowance_gte?: Int;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  accepted?: Boolean;
  accepted_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ConnectionScalarWhereInput[] | ConnectionScalarWhereInput;
  OR?: ConnectionScalarWhereInput[] | ConnectionScalarWhereInput;
  NOT?: ConnectionScalarWhereInput[] | ConnectionScalarWhereInput;
}

export interface ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput;
  data: ConnectionUpdateManyDataInput;
}

export interface ConnectionUpdateManyDataInput {
  allowance?: Int;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface MessageUpdateManyWithoutRecipientInput {
  create?:
    | MessageCreateWithoutRecipientInput[]
    | MessageCreateWithoutRecipientInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutRecipientInput[]
    | MessageUpdateWithWhereUniqueWithoutRecipientInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutRecipientInput[]
    | MessageUpsertWithWhereUniqueWithoutRecipientInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface MessageUpdateWithWhereUniqueWithoutRecipientInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRecipientDataInput;
}

export interface MessageUpdateWithoutRecipientDataInput {
  author?: UserUpdateOneRequiredWithoutOutboxInput;
  type?: String;
  text?: String;
}

export interface UserUpdateOneRequiredWithoutOutboxInput {
  create?: UserCreateWithoutOutboxInput;
  update?: UserUpdateWithoutOutboxDataInput;
  upsert?: UserUpsertWithoutOutboxInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutOutboxDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
}

export interface UserUpsertWithoutOutboxInput {
  update: UserUpdateWithoutOutboxDataInput;
  create: UserCreateWithoutOutboxInput;
}

export interface MessageUpsertWithWhereUniqueWithoutRecipientInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRecipientDataInput;
  create: MessageCreateWithoutRecipientInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  type?: String;
  text?: String;
}

export interface MessageUpdateManyWithoutAuthorInput {
  create?: MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    | MessageUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    | MessageUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface MessageUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutAuthorDataInput;
}

export interface MessageUpdateWithoutAuthorDataInput {
  recipient?: UserUpdateOneRequiredWithoutInboxInput;
  type?: String;
  text?: String;
}

export interface UserUpdateOneRequiredWithoutInboxInput {
  create?: UserCreateWithoutInboxInput;
  update?: UserUpdateWithoutInboxDataInput;
  upsert?: UserUpsertWithoutInboxInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutInboxDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserUpsertWithoutInboxInput {
  update: UserUpdateWithoutInboxDataInput;
  create: UserCreateWithoutInboxInput;
}

export interface MessageUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutAuthorDataInput;
  create: MessageCreateWithoutAuthorInput;
}

export interface UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput;
  create: UserCreateWithoutDecksInput;
}

export interface DeckUpsertNestedInput {
  update: DeckUpdateDataInput;
  create: DeckCreateInput;
}

export interface VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export interface VoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quality?: Boolean;
  quality_not?: Boolean;
  AND?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  OR?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  NOT?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface VoteUpdateManyDataInput {
  quality?: Boolean;
}

export interface UserUpsertWithoutConnectionsInput {
  update: UserUpdateWithoutConnectionsDataInput;
  create: UserCreateWithoutConnectionsInput;
}

export interface ConnectionUpdateManyMutationInput {
  allowance?: Int;
  about?: String;
  verified?: Boolean;
  accepted?: Boolean;
}

export interface DeckUpdateInput {
  author?: UserUpdateOneRequiredWithoutDecksInput;
  deckList?: String;
  deckDetails?: String;
  deckName?: String;
  score?: Int;
}

export interface DeckUpdateManyMutationInput {
  deckList?: String;
  deckDetails?: String;
  deckName?: String;
  score?: Int;
}

export interface MessageCreateInput {
  author: UserCreateOneWithoutOutboxInput;
  recipient: UserCreateOneWithoutInboxInput;
  type?: String;
  text: String;
}

export interface MessageUpdateInput {
  author?: UserUpdateOneRequiredWithoutOutboxInput;
  recipient?: UserUpdateOneRequiredWithoutInboxInput;
  type?: String;
  text?: String;
}

export interface MessageUpdateManyMutationInput {
  type?: String;
  text?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
}

export interface UserInfoCreateInput {
  user: UserCreateOneWithoutUserInfoInput;
  about: String;
  timeZone: String;
}

export interface UserCreateOneWithoutUserInfoInput {
  create?: UserCreateWithoutUserInfoInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutUserInfoInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  userSettings?: UserSettingsCreateOneWithoutUserInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface UserInfoUpdateInput {
  user?: UserUpdateOneRequiredWithoutUserInfoInput;
  about?: String;
  timeZone?: String;
}

export interface UserUpdateOneRequiredWithoutUserInfoInput {
  create?: UserCreateWithoutUserInfoInput;
  update?: UserUpdateWithoutUserInfoDataInput;
  upsert?: UserUpsertWithoutUserInfoInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutUserInfoDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  userSettings?: UserSettingsUpdateOneWithoutUserInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserUpsertWithoutUserInfoInput {
  update: UserUpdateWithoutUserInfoDataInput;
  create: UserCreateWithoutUserInfoInput;
}

export interface UserInfoUpdateManyMutationInput {
  about?: String;
  timeZone?: String;
}

export interface UserSettingsCreateInput {
  user: UserCreateOneWithoutUserSettingsInput;
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface UserCreateOneWithoutUserSettingsInput {
  create?: UserCreateWithoutUserSettingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutUserSettingsInput {
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoCreateOneWithoutUserInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  votes?: VoteCreateManyInput;
  connections?: ConnectionCreateManyWithoutFriendInput;
  inbox?: MessageCreateManyWithoutRecipientInput;
  outbox?: MessageCreateManyWithoutAuthorInput;
}

export interface UserSettingsUpdateInput {
  user?: UserUpdateOneRequiredWithoutUserSettingsInput;
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface UserUpdateOneRequiredWithoutUserSettingsInput {
  create?: UserCreateWithoutUserSettingsInput;
  update?: UserUpdateWithoutUserSettingsDataInput;
  upsert?: UserUpsertWithoutUserSettingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutUserSettingsDataInput {
  name?: String;
  email?: String;
  password?: String;
  isAdmin?: Boolean;
  userInfo?: UserInfoUpdateOneWithoutUserInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  votes?: VoteUpdateManyInput;
  connections?: ConnectionUpdateManyWithoutFriendInput;
  inbox?: MessageUpdateManyWithoutRecipientInput;
  outbox?: MessageUpdateManyWithoutAuthorInput;
}

export interface UserUpsertWithoutUserSettingsInput {
  update: UserUpdateWithoutUserSettingsDataInput;
  create: UserCreateWithoutUserSettingsInput;
}

export interface UserSettingsUpdateManyMutationInput {
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface VoteUpdateInput {
  deck?: DeckUpdateOneRequiredInput;
  quality?: Boolean;
}

export interface VoteUpdateManyMutationInput {
  quality?: Boolean;
}

export interface ConnectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConnectionWhereInput;
  AND?: ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput;
  OR?: ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput;
  NOT?: ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput;
}

export interface DeckSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeckWhereInput;
  AND?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  OR?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  NOT?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserInfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserInfoWhereInput;
  AND?: UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput;
  OR?: UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput;
  NOT?: UserInfoSubscriptionWhereInput[] | UserInfoSubscriptionWhereInput;
}

export interface UserSettingsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserSettingsWhereInput;
  AND?:
    | UserSettingsSubscriptionWhereInput[]
    | UserSettingsSubscriptionWhereInput;
  OR?:
    | UserSettingsSubscriptionWhereInput[]
    | UserSettingsSubscriptionWhereInput;
  NOT?:
    | UserSettingsSubscriptionWhereInput[]
    | UserSettingsSubscriptionWhereInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Connection {
  id: ID_Output;
  allowance: Int;
  about: String;
  verified?: Boolean;
  accepted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConnectionPromise extends Promise<Connection>, Fragmentable {
  id: () => Promise<ID_Output>;
  allowance: () => Promise<Int>;
  friend: <T = UserPromise>() => T;
  about: () => Promise<String>;
  verified: () => Promise<Boolean>;
  accepted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConnectionSubscription
  extends Promise<AsyncIterator<Connection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  allowance: () => Promise<AsyncIterator<Int>>;
  friend: <T = UserSubscription>() => T;
  about: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  userInfo: <T = UserInfoPromise>() => T;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userSettings: <T = UserSettingsPromise>() => T;
  connections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inbox: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  outbox: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  userInfo: <T = UserInfoSubscription>() => T;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userSettings: <T = UserSettingsSubscription>() => T;
  connections: <T = Promise<AsyncIterator<ConnectionSubscription>>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inbox: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  outbox: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserInfo {
  id: ID_Output;
  about: String;
  timeZone: String;
}

export interface UserInfoPromise extends Promise<UserInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  about: () => Promise<String>;
  timeZone: () => Promise<String>;
}

export interface UserInfoSubscription
  extends Promise<AsyncIterator<UserInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  about: () => Promise<AsyncIterator<String>>;
  timeZone: () => Promise<AsyncIterator<String>>;
}

export interface Deck {
  id: ID_Output;
  deckList: String;
  deckDetails: String;
  deckName: String;
  score: Int;
}

export interface DeckPromise extends Promise<Deck>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  deckList: () => Promise<String>;
  deckDetails: () => Promise<String>;
  deckName: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface DeckSubscription
  extends Promise<AsyncIterator<Deck>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  deckList: () => Promise<AsyncIterator<String>>;
  deckDetails: () => Promise<AsyncIterator<String>>;
  deckName: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface Vote {
  id: ID_Output;
  quality: Boolean;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  deck: <T = DeckPromise>() => T;
  quality: () => Promise<Boolean>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deck: <T = DeckSubscription>() => T;
  quality: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSettings {
  id: ID_Output;
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface UserSettingsPromise
  extends Promise<UserSettings>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  darkMode: () => Promise<Boolean>;
  autoAccept: () => Promise<Boolean>;
}

export interface UserSettingsSubscription
  extends Promise<AsyncIterator<UserSettings>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  darkMode: () => Promise<AsyncIterator<Boolean>>;
  autoAccept: () => Promise<AsyncIterator<Boolean>>;
}

export interface Message {
  id: ID_Output;
  type: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  recipient: <T = UserPromise>() => T;
  type: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  recipient: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConnectionConnection {
  pageInfo: PageInfo;
  edges: ConnectionEdge[];
}

export interface ConnectionConnectionPromise
  extends Promise<ConnectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConnectionEdge>>() => T;
  aggregate: <T = AggregateConnectionPromise>() => T;
}

export interface ConnectionConnectionSubscription
  extends Promise<AsyncIterator<ConnectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConnectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConnectionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConnectionEdge {
  node: Connection;
  cursor: String;
}

export interface ConnectionEdgePromise
  extends Promise<ConnectionEdge>,
    Fragmentable {
  node: <T = ConnectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConnectionEdgeSubscription
  extends Promise<AsyncIterator<ConnectionEdge>>,
    Fragmentable {
  node: <T = ConnectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConnection {
  count: Int;
}

export interface AggregateConnectionPromise
  extends Promise<AggregateConnection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConnectionSubscription
  extends Promise<AsyncIterator<AggregateConnection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeckConnection {
  pageInfo: PageInfo;
  edges: DeckEdge[];
}

export interface DeckConnectionPromise
  extends Promise<DeckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeckEdge>>() => T;
  aggregate: <T = AggregateDeckPromise>() => T;
}

export interface DeckConnectionSubscription
  extends Promise<AsyncIterator<DeckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeckSubscription>() => T;
}

export interface DeckEdge {
  node: Deck;
  cursor: String;
}

export interface DeckEdgePromise extends Promise<DeckEdge>, Fragmentable {
  node: <T = DeckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeckEdgeSubscription
  extends Promise<AsyncIterator<DeckEdge>>,
    Fragmentable {
  node: <T = DeckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeck {
  count: Int;
}

export interface AggregateDeckPromise
  extends Promise<AggregateDeck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeckSubscription
  extends Promise<AsyncIterator<AggregateDeck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserInfoConnection {
  pageInfo: PageInfo;
  edges: UserInfoEdge[];
}

export interface UserInfoConnectionPromise
  extends Promise<UserInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserInfoEdge>>() => T;
  aggregate: <T = AggregateUserInfoPromise>() => T;
}

export interface UserInfoConnectionSubscription
  extends Promise<AsyncIterator<UserInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserInfoSubscription>() => T;
}

export interface UserInfoEdge {
  node: UserInfo;
  cursor: String;
}

export interface UserInfoEdgePromise
  extends Promise<UserInfoEdge>,
    Fragmentable {
  node: <T = UserInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserInfoEdgeSubscription
  extends Promise<AsyncIterator<UserInfoEdge>>,
    Fragmentable {
  node: <T = UserInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserInfo {
  count: Int;
}

export interface AggregateUserInfoPromise
  extends Promise<AggregateUserInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserInfoSubscription
  extends Promise<AsyncIterator<AggregateUserInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSettingsConnection {
  pageInfo: PageInfo;
  edges: UserSettingsEdge[];
}

export interface UserSettingsConnectionPromise
  extends Promise<UserSettingsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserSettingsEdge>>() => T;
  aggregate: <T = AggregateUserSettingsPromise>() => T;
}

export interface UserSettingsConnectionSubscription
  extends Promise<AsyncIterator<UserSettingsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserSettingsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSettingsSubscription>() => T;
}

export interface UserSettingsEdge {
  node: UserSettings;
  cursor: String;
}

export interface UserSettingsEdgePromise
  extends Promise<UserSettingsEdge>,
    Fragmentable {
  node: <T = UserSettingsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserSettingsEdgeSubscription
  extends Promise<AsyncIterator<UserSettingsEdge>>,
    Fragmentable {
  node: <T = UserSettingsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserSettings {
  count: Int;
}

export interface AggregateUserSettingsPromise
  extends Promise<AggregateUserSettings>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSettingsSubscription
  extends Promise<AsyncIterator<AggregateUserSettings>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConnectionSubscriptionPayload {
  mutation: MutationType;
  node: Connection;
  updatedFields: String[];
  previousValues: ConnectionPreviousValues;
}

export interface ConnectionSubscriptionPayloadPromise
  extends Promise<ConnectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConnectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConnectionPreviousValuesPromise>() => T;
}

export interface ConnectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConnectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConnectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConnectionPreviousValuesSubscription>() => T;
}

export interface ConnectionPreviousValues {
  id: ID_Output;
  allowance: Int;
  about: String;
  verified?: Boolean;
  accepted?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConnectionPreviousValuesPromise
  extends Promise<ConnectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  allowance: () => Promise<Int>;
  about: () => Promise<String>;
  verified: () => Promise<Boolean>;
  accepted: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConnectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ConnectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  allowance: () => Promise<AsyncIterator<Int>>;
  about: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeckSubscriptionPayload {
  mutation: MutationType;
  node: Deck;
  updatedFields: String[];
  previousValues: DeckPreviousValues;
}

export interface DeckSubscriptionPayloadPromise
  extends Promise<DeckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeckPreviousValuesPromise>() => T;
}

export interface DeckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeckPreviousValuesSubscription>() => T;
}

export interface DeckPreviousValues {
  id: ID_Output;
  deckList: String;
  deckDetails: String;
  deckName: String;
  score: Int;
}

export interface DeckPreviousValuesPromise
  extends Promise<DeckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deckList: () => Promise<String>;
  deckDetails: () => Promise<String>;
  deckName: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface DeckPreviousValuesSubscription
  extends Promise<AsyncIterator<DeckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deckList: () => Promise<AsyncIterator<String>>;
  deckDetails: () => Promise<AsyncIterator<String>>;
  deckName: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  type: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  isAdmin?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserInfoSubscriptionPayload {
  mutation: MutationType;
  node: UserInfo;
  updatedFields: String[];
  previousValues: UserInfoPreviousValues;
}

export interface UserInfoSubscriptionPayloadPromise
  extends Promise<UserInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserInfoPreviousValuesPromise>() => T;
}

export interface UserInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserInfoPreviousValuesSubscription>() => T;
}

export interface UserInfoPreviousValues {
  id: ID_Output;
  about: String;
  timeZone: String;
}

export interface UserInfoPreviousValuesPromise
  extends Promise<UserInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  about: () => Promise<String>;
  timeZone: () => Promise<String>;
}

export interface UserInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<UserInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  about: () => Promise<AsyncIterator<String>>;
  timeZone: () => Promise<AsyncIterator<String>>;
}

export interface UserSettingsSubscriptionPayload {
  mutation: MutationType;
  node: UserSettings;
  updatedFields: String[];
  previousValues: UserSettingsPreviousValues;
}

export interface UserSettingsSubscriptionPayloadPromise
  extends Promise<UserSettingsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserSettingsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserSettingsPreviousValuesPromise>() => T;
}

export interface UserSettingsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSettingsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSettingsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserSettingsPreviousValuesSubscription>() => T;
}

export interface UserSettingsPreviousValues {
  id: ID_Output;
  darkMode?: Boolean;
  autoAccept?: Boolean;
}

export interface UserSettingsPreviousValuesPromise
  extends Promise<UserSettingsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  darkMode: () => Promise<Boolean>;
  autoAccept: () => Promise<Boolean>;
}

export interface UserSettingsPreviousValuesSubscription
  extends Promise<AsyncIterator<UserSettingsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  darkMode: () => Promise<AsyncIterator<Boolean>>;
  autoAccept: () => Promise<AsyncIterator<Boolean>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
  quality: Boolean;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quality: () => Promise<Boolean>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quality: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Connection",
    embedded: false
  },
  {
    name: "Deck",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserInfo",
    embedded: false
  },
  {
    name: "UserSettings",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
